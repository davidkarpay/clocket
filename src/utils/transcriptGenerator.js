/**
 * Transcript generation utilities for court hearings
 */

/**
 * Generates a mock transcript for demonstration purposes
 * In production, this would call a local Whisper/Vosk transcription service
 * @param {Blob} audioBlob - Audio blob to transcribe
 * @param {Object} hearing - Hearing metadata
 * @param {number} duration - Recording duration in seconds
 * @returns {Promise<string>} Generated transcript
 */
async function generateMockTranscript(audioBlob, hearing, duration) {
  if (!audioBlob) {
    throw new Error('No audio data available for transcription');
  }
  
  // Simulate processing time
  await new Promise(resolve => setTimeout(resolve, 2000));
  
  const transcript = `[Transcript for ${hearing['Case Number']}]\n\n` +
    `Court proceedings for ${hearing['Client Name']} in ${hearing['Division']} at ${hearing['Time']}.\n\n` +
    `[This is a mock transcript. In production, this would be generated by a local Whisper/Vosk model.]\n\n` +
    `Duration: ${formatDuration(duration)}`;
    
  return transcript;
}

/**
 * Creates a downloadable transcript file
 * @param {Object} hearing - Hearing metadata
 * @param {string} transcript - Generated transcript text
 * @param {string} notes - User notes
 * @param {number} duration - Recording duration
 * @param {string} filename - Filename for download
 */
function downloadTranscript(hearing, transcript, notes, duration, filename) {
  if (!transcript) {
    throw new Error('No transcript available for download');
  }
  
  const content = `Case: ${hearing['Case Number']}\n` +
    `Client: ${hearing['Client Name']}\n` +
    `Division: ${hearing['Division']}\n` +
    `Time: ${hearing['Time']}\n` +
    `Duration: ${formatDuration(duration)}\n\n` +
    `TRANSCRIPT:\n${transcript}\n\n` +
    `NOTES:\n${notes}`;
  
  const blob = new Blob([content], { type: 'text/plain' });
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = filename;
  a.click();
  URL.revokeObjectURL(url);
}

/**
 * Formats duration in seconds to MM:SS format
 * @param {number} seconds - Duration in seconds
 * @returns {string} Formatted duration string
 */
function formatDuration(seconds) {
  const mins = Math.floor(seconds / 60);
  const secs = seconds % 60;
  return `${mins}:${secs.toString().padStart(2, '0')}`;
}

module.exports = {
  generateMockTranscript,
  downloadTranscript
};